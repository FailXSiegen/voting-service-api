schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
enum PollType {
    SECRET
    PUBLIC
}
type Query {
    # Fetches a list of upcoming events by organizer id.
    upcomingEvents(organizerId: ID): [Event]
    # Fetches a list of expired events by organizer id.
    expiredEvents(organizerId: ID): [Event]
    # Fetches a list of evnet users by event id.
    eventUsers(eventId: ID): [EventUser]
    # Fetches an event user by id.
    eventUser(id: ID): EventUser
    # Fetches all polls by event id.
    pollsWithNoResults(eventId: ID): [Poll]
    # Fetches all poll results by event id.
    pollResult(eventId: ID): [PollResult]
}
type Mutation {
    # Create a new organizer.
    createOrganizer(input: CreateOrganizerInput!): Organizer!
    # Update an organizer.
    updateOrganizer(input: UpdateOrganizerInput!): Organizer!
    # Delete an organizer.
    deleteOrganizer(id: ID!): Boolean
    # Creates a new event.
    createEvent(input: CreateEventInput!): Event!
    # Creates a new event.
    updateEvent(input: UpdateEventInput!): Event!
    # Create a new poll.
    createPoll(input: CreateNewPollInput!, instantStart: Boolean!): Poll!
    # Delete a poll.
    removePoll(id: ID!): Boolean!
    # Delete a poll.
    startPoll(id: ID!): Poll!
    # Delete a poll.
    stopPoll(id: ID!): Boolean!
    # Create poll answer on poll submit.
    createPollSubmitAnswer(input: PollSubmitAnswer): Boolean
    # Create a new poll answer.
    createPollAnswer(input: PollPossibleAnswerInput!): PollPossibleAnswer!
    # Create poll dependencies
    createPollDependencies(pollRecord: PollInput!): Boolean
    # Create a new event user for an event.
    createEventUser(input: CreateEventUserInput!): EventUser!
    # Update EventUser
    updateEventUser(input: UpdateEventUserInput!): EventUser!
    # Update event user to guest (verfied: true, allowToVote: false).
    updateUserToGuest(eventUserId: ID!): EventUser!
    # Update event user to participant (verfied: true, allowToVote: true).
    updateUserToParticipant(eventUserId: ID!): EventUser!
}
type Subscription {
    # Notifies about user access rights updates.
    updateEventUserAccessRights(eventUserId: ID): EventUserAccessRights!
    # Notifies about the life cycle of a poll.
    pollLifeCycle: PollLifeCylclePayload!
    # Notifies about a new event user record.
    newEventUser: EventUser!
    # Notifies about event user online states.
    eventUserLifeCycle: EventUserLifeCyclePayload!
}
type Organizer {
    id: ID!
    createDatetime: Int!
    username: String!
    email: String!
    password: String!
    publicName: String!
    events: [Event]
}
type Event {
    id: ID!
    createDatetime: Int
    modifiedDatetime: Int
    title: String
    slug: String
    description: String
    scheduledDatetime: Int!
    organizer: Organizer
    lobbyOpen: Boolean
    active: Boolean
}
type EventUser {
    id: ID!
    publicName: String!
    verified: Boolean!
    allowToVote: Boolean!
    online: Boolean!
    username: String!
    voteAmount: Int!
    eventId: ID!
}
type EventUserAccessRights {
    eventId: ID!
    eventUserId: ID!
    verified: Boolean!
    allowToVote: Boolean!
    voteAmount: Int!
}
type EventUserLifeCyclePayload {
    online: Boolean!
    eventUserId: ID!
}
type Poll {
    id: ID!
    eventId: ID!
    createDatetime: Int
    title: String!
    type: PollType!
    possibleAnswers: [PollPossibleAnswer]
    minVotes: Int
    maxVotes: Int
    allowAbstain: Boolean
}
type PollResult {
    id: ID!
    maxVotes: Int
    createDatetime: Int
    type: PollType!
    poll: Poll!
    pollUser: [PollUser!]
    pollAnswer: [PollAnswer!]
}
type PollPossibleAnswer {
    id: ID!
    createDatetime: Int
    content: String!
}
type PollUser {
    pollId: ID!
    eventUserId: ID!
    publicName: String!
}
type PollAnswer {
    id: ID!
    pollResultId: ID!
    answerContent: String!
    pollUser: PollUser
}
type PollLifeCylclePayload {
    state: String!
    poll: Poll
    pollResultId: ID
}
type Result {
    id: ID!
    pollId: ID!
    content: String!
}
input PollPossibleAnswerInput {
    content: String!
}
input CreateOrganizerInput {
    username: String!
    email: String!
    password: String!
    publicName: String!
}
input UpdateOrganizerInput {
    id: ID!
    username: String
    email: String
    password: String
    publicName: String
}
input CreateEventInput {
    title: String!
    slug: String!
    description: String
    scheduledDatetime: Int!
    organizerId: ID!
    lobbyOpen: Boolean!
    active: Boolean!
}
input UpdateEventInput {
    id: ID!
    title: String!
    slug: String!
    description: String
    scheduledDatetime: Int!
    lobbyOpen: Boolean!
    active: Boolean!
}
input CreateEventUserInput {
    eventId: ID!
    username: String!
    verified: Boolean!
    allowToVote: Boolean!
    publicName: String
    voteAmount: Int
}
input UpdateEventUserInput {
    id: ID!
    eventId: ID!
    username: String!
    verified: Boolean!
    allowToVote: Boolean!
    publicName: String
    voteAmount: Int
}
input CreateNewPollInput {
    eventId: ID!
    title: String!
    type: PollType!
    possibleAnswers: [PollPossibleAnswerInput!]
    minVotes: Int
    maxVotes: Int
    allowAbstain: Boolean
}
input PollInput {
    id: ID!
    type: PollType!
    eventId: ID!
}
input PollSubmitAnswer {
    answerContent: String!
    pollResultId: ID!
    eventUserId: ID
    type: String!
    possibleAnswerId: ID!
}