schema {
    query: Query
    mutation: Mutation
}
type Query {
    # Fetches a list of upcoming events by oragnizer id.
    upcomingEvents(organizerId: ID): [Event]
    # Fetches a list of expired events by oragnizer id.
    expiredEvents(organizerId: ID): [Event]
}
type Mutation {
    createOrganizer(input: CreateOrganizerInput!): Organizer!
    updateOrganizer(input: UpdateOrganizerInput!): Organizer!
    deleteOrganizer(id: ID!): Boolean
    # Creates a new event user.
    createEvent(input: CreateEventInput!): Event!
}
type Organizer {
    id: ID!
    createDatetime: Int!
    username: String!
    email: String!
    password: String!
    publicName: String!
    events: [Event]
}
type Event {
    id: ID!
    createDatetime: Int
    modifiedDatetime: Int
    title: String
    slug: String
    description: String
    scheduledDatetime: Int!
    organizer: Organizer
    lobbyOpen: Boolean
    active: Boolean
}
input CreateOrganizerInput {
    username: String!
    email: String!
    password: String!
    publicName: String!
}
input UpdateOrganizerInput {
    id: ID!
    username: String
    email: String
    password: String
    publicName: String
}
input CreateEventInput {
    title: String!
    slug: String!
    description: String
    scheduledDatetime: Int!
    organizerId: ID!
    lobbyOpen: Boolean!
    active: Boolean!
}